{"version":3,"sources":["App.js","serviceWorker.js","index.js","ill.svg"],"names":["speech","Speech","App","state","message","_onChange","e","setState","target","value","onPlay","speak","text","queue","listeners","onstart","console","log","onend","onresume","onboundary","event","name","elapsedTime","then","data","catch","error","init","volume","lang","rate","pitch","voice","splitSentences","onvoiceschanged","voices","hasBrowserSupport","className","type","onChange","this","style","backgroundColor","onClick","src","ill","width","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"ySAIMA,EAAS,IAAIC,IAEEC,E,2MACnBC,MAAQ,CACNC,QAAS,I,EAGXC,UAAY,SAAAC,GACV,EAAKC,SAAS,CAAEH,QAASE,EAAEE,OAAOC,S,EA+BpCC,OAAS,WACPV,EACGW,MAAM,CACLC,KAAM,EAAKT,MAAMC,QACjBS,OAAO,EACPC,UAAW,CACTC,QAAS,WACPC,QAAQC,IAAI,oBAEdC,MAAO,WACLF,QAAQC,IAAI,kBAEdE,SAAU,WACRH,QAAQC,IAAI,qBAEdG,WAAY,SAAAC,GACVL,QAAQC,IACNI,EAAMC,KACJ,2BACAD,EAAME,YACN,sBAKTC,MAAK,SAAAC,GACJT,QAAQC,IAAI,YAAaQ,MAE1BC,OAAM,SAAApB,GACLU,QAAQW,MAAM,sBAAuBrB,O,mFAxDzC,IAAMN,EAAS,IAAIC,IACnBD,EACG4B,KAAK,CACJC,OAAQ,GACRC,KAAM,QACNC,KAAM,EACNC,MAAO,EACPC,MAAO,yBACPC,gBAAgB,EAChBpB,UAAW,CACTqB,gBAAiB,SAAAC,GACfpB,QAAQC,IAAI,iBAAkBmB,OAInCZ,MAAK,SAAAC,GACJT,QAAQC,IAAI,kBAAmBQ,MAEhCC,OAAM,SAAApB,GACLU,QAAQW,MAAM,yCAA0CrB,MAE5D,IAAMM,EAAOZ,EAAOqC,oBAChB,iDACA,uFACJrB,QAAQC,IAAIL,K,+BAqCZ,OACE,yBAAK0B,UAAU,mCACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,YAAd,OACA,uBAAGA,UAAU,IAAb,mBACA,2BACEC,KAAK,OACLjB,KAAK,OACLkB,SAAUC,KAAKpC,UACfiC,UAAU,wJAGZ,4BACEA,UAAU,+HACVI,MAAO,CAAEC,gBAAiB,WAC1BC,QAASH,KAAK/B,QAHhB,SAQF,yBAAKmC,IAAKC,IAAKJ,MAAO,CAAEK,MAAO,gB,GA3FNC,aCMbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,iB,kBEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.299183e8.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { Component } from \"react\";\nimport Speech from \"speak-tts\";\nimport ill from \"./ill.svg\";\nconst speech = new Speech();\n\nexport default class App extends Component {\n  state = {\n    message: \"\"\n  };\n\n  _onChange = e => {\n    this.setState({ message: e.target.value });\n  };\n\n  componentDidMount() {\n    const speech = new Speech();\n    speech\n      .init({\n        volume: 0.5,\n        lang: \"en-GB\",\n        rate: 1,\n        pitch: 1,\n        voice: \"Google UK English Male\",\n        splitSentences: false,\n        listeners: {\n          onvoiceschanged: voices => {\n            console.log(\"Voices changed\", voices);\n          }\n        }\n      })\n      .then(data => {\n        console.log(\"Speech is ready\", data);\n      })\n      .catch(e => {\n        console.error(\"An error occured while initializing : \", e);\n      });\n    const text = speech.hasBrowserSupport()\n      ? \"Hurray, your browser supports speech synthesis\"\n      : \"Your browser does NOT support speech synthesis. Try using Chrome of Safari instead !\";\n    console.log(text);\n  }\n\n  onPlay = () => {\n    speech\n      .speak({\n        text: this.state.message,\n        queue: false,\n        listeners: {\n          onstart: () => {\n            console.log(\"Start utterance\");\n          },\n          onend: () => {\n            console.log(\"End utterance\");\n          },\n          onresume: () => {\n            console.log(\"Resume utterance\");\n          },\n          onboundary: event => {\n            console.log(\n              event.name +\n                \" boundary reached after \" +\n                event.elapsedTime +\n                \" milliseconds.\"\n            );\n          }\n        }\n      })\n      .then(data => {\n        console.log(\"Success !\", data);\n      })\n      .catch(e => {\n        console.error(\"An error occurred :\", e);\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"text-center flex justify-center\">\n        <div className=\"mr-20 pt-20\">\n          <h1 className=\"text-5xl\">LAi</h1>\n          <p className=\"\">Enter a message</p>\n          <input\n            type=\"text\"\n            name=\"name\"\n            onChange={this._onChange}\n            className=\"bg-white focus:outline-none focus:shadow-outline border border-gray-300 rounded-lg py-2 px-4 block w-64 appearance-none leading-normal mx-auto mt-5\"\n          />\n\n          <button\n            className=\"shadow-lg hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-yellow-700 hover:border-yellow-800 rounded mt-5\"\n            style={{ backgroundColor: \"#f9ca24\" }}\n            onClick={this.onPlay}\n          >\n            Send\n          </button>\n        </div>\n        <img src={ill} style={{ width: \"30rem\" }} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/ill.e20e38d0.svg\";"],"sourceRoot":""}